import Head from "next/head";
import classes from "@/styles/Home.module.css";
import BookList from "@/components/components/BookList";
import books from "public/books.json";
import { useEffect, useState } from "react";
let genre = null;
let pages = null;
export default function Home(props) {
  //const [genre, setGenre] = useState(null);
  const [qtyPages, setQtyPages] = useState(0);
  const [bookFiltered, setbookFiltered] = useState(null);
  const [selectedValue, setSelectedValue] = useState("");

  useEffect(() => {
    let modifiedBooks;
    let booksStore = localStorage.getItem("books");
    if (booksStore) {
      modifiedBooks = JSON.parse(booksStore);
      modifiedBooks = modifiedBooks.map((book) => {
        book.book.visible = true;
        return book;
      });
    } else {
      modifiedBooks = props.booksD.map((book) => {
        book.book.wish = false;
        book.book.visible = true;
        return book;
      });
    }
    props.setBooks(modifiedBooks);
  }, []);
  useEffect(() => {
    const uniqueGenre = new Set();
    uniqueGenre.add("Todos");

    props.booksD.map((book) => {
      uniqueGenre.add(book.book.genre);
    });
    genre = uniqueGenre;
  }, []);
  useEffect(() => {
    const max = Math.max(
      ...props.booksD.map((book) => {
        return book.book.pages;
      })
    );
    const min = Math.min(
      ...props.booksD.map((book) => {
        return book.book.pages;
      })
    );
    pages = {
      max: max,
      min: min,
    };
  }, []);

  const moveList = (book) => {
    const ISBN = book.ISBN;
    props.setBooks((prevBooks) => {
      const bookIndex = prevBooks.findIndex(
        (bookI) => bookI.book.ISBN === ISBN
      );
      if (bookIndex === -1) {
        return prevBooks; // Return previous state
      }
      const updatedBooks = [...prevBooks];
      const wish = updatedBooks[bookIndex].book.wish;
      updatedBooks[bookIndex].book = {
        ...updatedBooks[bookIndex].book,
        wish: !wish,
      };
      if (typeof window !== "undefined") {
        localStorage.setItem("books", JSON.stringify(updatedBooks));
      }

      return updatedBooks;
    });
  };
  const handleValueChange = (event) => {
    let genreSelected = event.target.value;
    setQtyPages(0);
    setSelectedValue(genreSelected);
    let modifiedBooks;
    if (genreSelected === "Todos") {
      modifiedBooks = props.books.map((book) => {
        book.book.visible = true;
        return book;
      });
    } else {
      modifiedBooks = props.books.map((book) => {
        if (!book.book.wish && book.book.genre !== genreSelected) {
          book.book.visible = false;
        } else {
          book.book.visible = true;
        }
        return book;
      });
    }
    props.setBooks(modifiedBooks);
  };

  const handleQtyChange = (value) => {
    setSelectedValue("Todos");
    props.books.map((book) => {
      if (!book.book.wish && book.book.pages < value) {
        book.book.visible = false;
      } else {
        book.book.visible = true;
      }
    });
  };

  return (
    <>
      <Head>
        <title>BookShelves</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={classes.container}>
        <section className={classes.availableSection}>
          <div>
            <h4>
              {`${
                props.books !== null &&
                props.books.filter(
                  (book) => book.book.visible && !book.book.wish
                ).length
              } `}
              libros disponibles
            </h4>
          </div>
          <div>
            <h4>
              {props.books !== null &&
                props.books.filter(
                  (book) => book.book.visible && book.book.wish
                ).length > 0 &&
                `${
                  props.books.filter(
                    (book) => book.book.visible && book.book.wish
                  ).length
                } 
              en la lista de lectura`}
            </h4>
          </div>
          <section className={classes.filtros}>
            <div className={classes.filtro}>
              <span className="">{`MÃ¡ximo: ${qtyPages}`}</span>
              <input
                type="range"
                max={pages != null ? pages.max : 0}
                min={pages != null ? pages.min : 0}
                step="1"
                value={qtyPages}
                onChange={(e) => {
                  const value = e.target.value;
                  setQtyPages(value);
                  handleQtyChange(value);
                }}
              />
            </div>
            <div className={classes.filtro}>
              <div>
                <h4>Filtrar por genero</h4>
              </div>

              <div>
                <select
                  value={selectedValue}
                  onChange={handleValueChange}
                  className={classes.genreSelect}
                >
                  {genre !== null &&
                    Array.from(genre).map((option, index) => (
                      <option key={index} value={option}>
                        {option}
                      </option>
                    ))}
                </select>
              </div>
            </div>
          </section>
          <BookList
            books={props.books}
            moveList={moveList}
            type={"available"}
            className={classes.available}
          />
        </section>
        <section className={classes.wishSection}>
          <h3>Lista de deseo</h3>
          <BookList
            books={props.books}
            moveList={moveList}
            type={"wish"}
            className={classes.wish}
          />
        </section>
      </div>
    </>
  );
}
export async function getStaticProps() {
  const DUMMY_BOOKS = books.library;
  return {
    props: {
      booksD: DUMMY_BOOKS,
    },
  };
}
